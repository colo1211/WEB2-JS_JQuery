async / await

특정 연산(함수)이 끝나면 특정한 코드를 실행하고 싶음
-> new Promise(( resolve, reject ) => { 
      var 어려운 연산 = 1+1; 
      resolve(); 
});  를 사용했었음 

* Promise(성공/ 실패 판독기) 를 사용하는 것은 좋지만 만들기 까다로움 

⭐ 이럴때 async/await 을 사용하면 함수가 Promise 역할이 가능하다. 
단, async 키워드는 함수명 앞에만 사용 가능

async를 함수 앞에 붙이면 함수 실행 후에 Promise 오브젝트가 남는다.
즉, resolve, reject 등이 남는다. 

단점 : .then 만 사용가능, .catch 는 사용이 불가능

* 예시1. 
async function 더하기(콜백){
                return 1+1; 
            }
            더하기().then((결과)=>{
                console.log(결과);     
            })

            
* 예시2. 
* Promise 내의 연산이 성공하면 이 .then 내부에 있는 코드를 실행해 주세요. 
async function 더하기(콜백){
                var 프로미스 = new Promise(function(resolve, reject){
                    var 연산 = 1+1; 
                    resolve(100); 
                }); 
                
                프로미스.then((결과)=>{
                console.log(결과);     
            })    
            }
            
            더하기();

* 예시3. await : async function 내부에서는 ✔await(기다려주셈)을  then 대신에 사용이 가능하다. (아니, then 과 똑같다.)
* await : 프로미스가 해결될때 까지 기다려

async function 더하기(콜백){
                var 프로미스 = new Promise(function(resolve, reject){
                    var 연산 = 1+1; 
                    resolve(100); 
                }); 
                
                var 결과 = await 프로미스; 
                console.log(결과);     
            }
            
            더하기();


✔ await 의 치명적인 단점 : ⭐ reject 시에 에러가 나오고 코드를 멈춤
따라서 자바스크립트 문법인 try{} catch{}  사용하여 보완한다.

try {
  // 이걸 해보고 에러나면
} 
catch { 
  // 이걸 실행해 주세요
} 

            async function 더하기(콜백){
                var 프로미스 = new Promise(function(resolve, reject){
                    var 연산 = 1+1; 
                    reject(100); 
                }); 
                
                try{
                var 결과 = await 프로미스; 
                console.log(결과); 

//                프로미스.then((결과)=>{
//                console.log(결과);     
//            })    
                }

                catch{
                    console.log('에러!'); 
            }
            }
            
            더하기(); 

