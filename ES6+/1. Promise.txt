ES6 동기 / 비동기

비동기식처리 (Asynchronous)
: 오래 걸리는 작업이 있으면 제껴놓고 다른거 부터 먼저 처리하는 방식 

````
console.log(1); 
 setTimeout(()=>{
       console.log(2); 
  },2000);
 console.log(3);
````

브라우저는 오래걸리는 코드들 (setTimeout, eventListener 코드들) 을 ⭐Web API 공간(실행 대기실)으로 보낸다.
따라서, Web API 덕분에 오래걸리는 작업이 있으면 다른거를 제껴두고 처리하는 비동기식 처리가 가능


⚠ 자바스크립트 : 동기식 처리 (synchronous)  
> 오래걸리는 연산을 만나면 그 자리에서 멈추고 이후에 코드를 실행 X 

하지만, Web API 와 연관된 함수를 쓰면 비동기식 처리 (asynchronous) 가 가능하다. 다른거 부터 실행 가능

그럼 자바스크립트를 순차적으로 실행하려면?? 콜백함수를 사용
* 콜백 함수 : 함수 안의 함수 (일종의 디자인 패턴) 
console.log(1); 
setTimeout( () =>{ console.log(2) }, 1000); 

만약 함수 2개를 차례로 선언하고 이를 순차적으로 실행하고 싶으면 어떻게 해야할까? 콜백함수를 사용한다. 
````

Pattern 1. 
function 첫째함수( 구멍 ){
       console.log(1); 
       구멍( );
 }
function 둘째함수( ){
       console.log(2); 
}
첫째함수( 둘째함수 );

Pattern 2. 
첫째함수(function 둘째함수(){
        console.log(2); 
})

-> 첫째함수를 실행하고 그 내부에서 파라미터로 받은 둘째함수를 순차적으로 실행한다. (콜백함수) 
````

⚠ 문제점. 순차적으로 콜백함수를 작성하는데, 만약 4개의 함수를 순차적으로 작성하고 싶다면..? 
> 콜백함수를 우선 4개를 써본다. 
⭐ 옆으로 엄청 길어짐 -> 콜백 지옥
첫째함수(function(){
                둘째함수(function(){
                    셋째함수(function(){
                        넷째함수(){ 
                        }
                    })
                })    
            }
)

단지 순차적으로 함수를 실행하기 위해서 콜백함수를 사용한 것인데 코드가 굉장히 보기가 더러워짐
⭐ Promise 패턴을 사용한다. 

[ Promise ] 
-> 콜백함수 만드는 것과 비슷함, 콜백함수 보다는 약간 더 많은 기능이 있음
-> 코드가 옆으로 길어지지 않아서 좋음
실패할 경우에도 코드가 실행이 가능하다. (이것은 혁명) 

⭐ Promise 는 성공/실패를 판독하는 기계
 resolve , reject 를 활용하여 성공과 실패를 하는 잣대를 설정해야 한다.  

Promise 의 3가지 상태 
1. resolved : 성공 
2. pending : 판정 대기 중
3. rejected : 실패  

판정 결과에 따라서 then, catch, finally 가 붙을 수 있다. 

* Promise 예시 1
````            
var 프로미스 = new Promise(function(resolve, reject){
          var 어려운연산 = 1+1; 
          resolve(); 
});  
    프로미스.then(function(){
        // 성공했을 때 (resolve가 실행될 때) 
     }).catch(function(){
        // 실패했을 때 (reject가 실행될 때)  
     }).finally(function(){
        // 성공이던 실패던 실행
     })
````

* Promise 예시 2
var 프로미스 = new Promise(function(resolve, reject){
                setTimeout(()=>{
                    resolve('성공'); 
                },1000);
            }); 
            프로미스.then(function(value){
                console.log(value); // 성공했을 때 
            }).catch(function(){
                console.log('실패');// 실패했을 때
            }).finally(function(){
                console.log('이건 뭐야');// 성공이던 실패던 실행
            })


